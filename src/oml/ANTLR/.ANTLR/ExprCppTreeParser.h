/** \file
 *  This C header file was generated by $ANTLR version 3.5
 *
 *     -  From the grammar source file : ExprCppTree.g
 *     -                            On : 2022-10-25 13:53:42
 *     -                for the parser : ExprCppTreeParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser 
ExprCppTreeParser

has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 *
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pExprCppTreeParser, which is returned from a call to ExprCppTreeParserNew().
 *
 * The methods in pExprCppTreeParser are  as follows:
 *
 *  - 
 ExprCppTreeParser_nl_or_sc_return
      pExprCppTreeParser->nl_or_sc(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_nl_or_sc_or_comment_return
      pExprCppTreeParser->nl_or_sc_or_comment(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_matrix_return
      pExprCppTreeParser->matrix(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_cell_return
      pExprCppTreeParser->cell(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_comma_or_sc_return
      pExprCppTreeParser->comma_or_sc(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_exprlist_return
      pExprCppTreeParser->exprlist(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_expr_return
      pExprCppTreeParser->expr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_expr2_return
      pExprCppTreeParser->expr2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ineqExpr_return
      pExprCppTreeParser->ineqExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_colonExpr_return
      pExprCppTreeParser->colonExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_addExpr_or_end_return
      pExprCppTreeParser->addExpr_or_end(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_addExpr_return
      pExprCppTreeParser->addExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_multExpr_return
      pExprCppTreeParser->multExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_unaryExpr_return
      pExprCppTreeParser->unaryExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_powExpr_return
      pExprCppTreeParser->powExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_postExpr2_return
      pExprCppTreeParser->postExpr2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_indexExpr_return
      pExprCppTreeParser->indexExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_postExpr_return
      pExprCppTreeParser->postExpr(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ugly1_return
      pExprCppTreeParser->ugly1(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ugly2_return
      pExprCppTreeParser->ugly2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ugly3_return
      pExprCppTreeParser->ugly3(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ugly4_return
      pExprCppTreeParser->ugly4(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ugly_return
      pExprCppTreeParser->ugly(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_equotes_return
      pExprCppTreeParser->equotes(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_string_return
      pExprCppTreeParser->string(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_chars_or_quote_return
      pExprCppTreeParser->chars_or_quote(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_comment_return
      pExprCppTreeParser->comment(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_keywords_return
      pExprCppTreeParser->keywords(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_keywords2_return
      pExprCppTreeParser->keywords2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_operators_return
      pExprCppTreeParser->operators(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_specials_return
      pExprCppTreeParser->specials(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_chars_return
      pExprCppTreeParser->chars(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_path_chars_return
      pExprCppTreeParser->path_chars(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_path_return
      pExprCppTreeParser->path(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_wildcard_return
      pExprCppTreeParser->wildcard(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_option_return
      pExprCppTreeParser->option(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ident_or_global_return
      pExprCppTreeParser->ident_or_global(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_atom_return
      pExprCppTreeParser->atom(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_end_or_eof_return
      pExprCppTreeParser->end_or_eof(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_func_begin_return
      pExprCppTreeParser->func_begin(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_mrfunc_begin_return
      pExprCppTreeParser->mrfunc_begin(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_funcdef1_return
      pExprCppTreeParser->funcdef1(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_funcdef2_return
      pExprCppTreeParser->funcdef2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_funcdef_return
      pExprCppTreeParser->funcdef(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_parse_dummy_return
      pExprCppTreeParser->parse_dummy(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_parse_dummy2_return
      pExprCppTreeParser->parse_dummy2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_mr_funcdef_return
      pExprCppTreeParser->mr_funcdef(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_func_handle_return
      pExprCppTreeParser->func_handle(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ident_or_number_return
      pExprCppTreeParser->ident_or_number(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ident_group_return
      pExprCppTreeParser->ident_group(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ident_group2_return
      pExprCppTreeParser->ident_group2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ident_group3_return
      pExprCppTreeParser->ident_group3(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_alt_fcall_return
      pExprCppTreeParser->alt_fcall(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_alt_fcall2_return
      pExprCppTreeParser->alt_fcall2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_clear_return
      pExprCppTreeParser->clear(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_clearvars_return
      pExprCppTreeParser->clearvars(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_mult_assign_return
      pExprCppTreeParser->mult_assign(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_flexible_index_return
      pExprCppTreeParser->flexible_index(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ident_or_keyword_return
      pExprCppTreeParser->ident_or_keyword(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_expr_or_colon_return
      pExprCppTreeParser->expr_or_colon(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_params_return
      pExprCppTreeParser->params(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_cell_params_return
      pExprCppTreeParser->cell_params(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_id_list_return
      pExprCppTreeParser->id_list(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_base_class_list_return
      pExprCppTreeParser->base_class_list(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_special_id_return
      pExprCppTreeParser->special_id(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_id_list2_return
      pExprCppTreeParser->id_list2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_ident_default_return
      pExprCppTreeParser->ident_default(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_id_list3_return
      pExprCppTreeParser->id_list3(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_caseblock_return
      pExprCppTreeParser->caseblock(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_otherwiseblock_return
      pExprCppTreeParser->otherwiseblock(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_switchcase_return
      pExprCppTreeParser->switchcase(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_else_clause_return
      pExprCppTreeParser->else_clause(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_else_clause1_return
      pExprCppTreeParser->else_clause1(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_else_clause2_return
      pExprCppTreeParser->else_clause2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_elseif_clause_return
      pExprCppTreeParser->elseif_clause(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_elseif_clause1_return
      pExprCppTreeParser->elseif_clause1(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_elseif_clause2_return
      pExprCppTreeParser->elseif_clause2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_if_clause_return
      pExprCppTreeParser->if_clause(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_if_clause1_return
      pExprCppTreeParser->if_clause1(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_if_clause2_return
      pExprCppTreeParser->if_clause2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_conditional_return
      pExprCppTreeParser->conditional(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_conditional2_return
      pExprCppTreeParser->conditional2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_whileloop_return
      pExprCppTreeParser->whileloop(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_whileloop2_return
      pExprCppTreeParser->whileloop2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_forloop_return
      pExprCppTreeParser->forloop(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_forloop2_return
      pExprCppTreeParser->forloop2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_forloop3_return
      pExprCppTreeParser->forloop3(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_parforloop_return
      pExprCppTreeParser->parforloop(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_assign_return
      pExprCppTreeParser->assign(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_global_return
      pExprCppTreeParser->global(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_global2_return
      pExprCppTreeParser->global2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_persistent_return
      pExprCppTreeParser->persistent(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_comment_or_newline_return
      pExprCppTreeParser->comment_or_newline(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_comment_or_newline2_return
      pExprCppTreeParser->comment_or_newline2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_comment_or_newline_strict_return
      pExprCppTreeParser->comment_or_newline_strict(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_trycatch_return
      pExprCppTreeParser->trycatch(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_substmt_return
      pExprCppTreeParser->substmt(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_stmt2_return
      pExprCppTreeParser->stmt2(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_stmt_group_return
      pExprCppTreeParser->stmt_group(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_properties_return
      pExprCppTreeParser->properties(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_func_or_mrfunc_def_return
      pExprCppTreeParser->func_or_mrfunc_def(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_methods_begin_return
      pExprCppTreeParser->methods_begin(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_methods_return
      pExprCppTreeParser->methods(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_class_begin_return
      pExprCppTreeParser->class_begin(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_classdef_return
      pExprCppTreeParser->classdef(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_nl_or_eof_return
      pExprCppTreeParser->nl_or_eof(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_stmt_return
      pExprCppTreeParser->stmt(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_alt_stmt_return
      pExprCppTreeParser->alt_stmt(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_base_stmt_return
      pExprCppTreeParser->base_stmt(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_prog_return
      pExprCppTreeParser->prog(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_statement_list_return
      pExprCppTreeParser->statement_list(pExprCppTreeParser)
 *  - 
 ExprCppTreeParser_statement_list2_return
      pExprCppTreeParser->statement_list2(pExprCppTreeParser)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD license"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_ExprCppTreeParser_H
#define _ExprCppTreeParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct ExprCppTreeParser_Ctx_struct ExprCppTreeParser, * pExprCppTreeParser;



   	#include "../../Runtime/ANTLRoverride.h"


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

typedef struct ExprCppTreeParser_nl_or_sc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_nl_or_sc_return;



typedef struct ExprCppTreeParser_nl_or_sc_or_comment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_nl_or_sc_or_comment_return;



typedef struct ExprCppTreeParser_matrix_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_matrix_return;



typedef struct ExprCppTreeParser_cell_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_cell_return;



typedef struct ExprCppTreeParser_comma_or_sc_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_comma_or_sc_return;



typedef struct ExprCppTreeParser_exprlist_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_exprlist_return;



typedef struct ExprCppTreeParser_expr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_expr_return;



typedef struct ExprCppTreeParser_expr2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_expr2_return;



typedef struct ExprCppTreeParser_ineqExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ineqExpr_return;



typedef struct ExprCppTreeParser_colonExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_colonExpr_return;



typedef struct ExprCppTreeParser_addExpr_or_end_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_addExpr_or_end_return;



typedef struct ExprCppTreeParser_addExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_addExpr_return;



typedef struct ExprCppTreeParser_multExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_multExpr_return;



typedef struct ExprCppTreeParser_unaryExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_unaryExpr_return;



typedef struct ExprCppTreeParser_powExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_powExpr_return;



typedef struct ExprCppTreeParser_postExpr2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_postExpr2_return;



typedef struct ExprCppTreeParser_indexExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_indexExpr_return;



typedef struct ExprCppTreeParser_postExpr_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_postExpr_return;



typedef struct ExprCppTreeParser_ugly1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ugly1_return;



typedef struct ExprCppTreeParser_ugly2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ugly2_return;



typedef struct ExprCppTreeParser_ugly3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ugly3_return;



typedef struct ExprCppTreeParser_ugly4_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ugly4_return;



typedef struct ExprCppTreeParser_ugly_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ugly_return;



typedef struct ExprCppTreeParser_equotes_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_equotes_return;



typedef struct ExprCppTreeParser_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_string_return;



typedef struct ExprCppTreeParser_chars_or_quote_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_chars_or_quote_return;



typedef struct ExprCppTreeParser_comment_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_comment_return;



typedef struct ExprCppTreeParser_keywords_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_keywords_return;



typedef struct ExprCppTreeParser_keywords2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_keywords2_return;



typedef struct ExprCppTreeParser_operators_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_operators_return;



typedef struct ExprCppTreeParser_specials_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_specials_return;



typedef struct ExprCppTreeParser_chars_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_chars_return;



typedef struct ExprCppTreeParser_path_chars_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_path_chars_return;



typedef struct ExprCppTreeParser_path_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_path_return;



typedef struct ExprCppTreeParser_wildcard_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_wildcard_return;



typedef struct ExprCppTreeParser_option_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_option_return;



typedef struct ExprCppTreeParser_ident_or_global_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ident_or_global_return;



typedef struct ExprCppTreeParser_atom_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_atom_return;



typedef struct ExprCppTreeParser_end_or_eof_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_end_or_eof_return;



typedef struct ExprCppTreeParser_func_begin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_func_begin_return;



typedef struct ExprCppTreeParser_mrfunc_begin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_mrfunc_begin_return;



typedef struct ExprCppTreeParser_funcdef1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_funcdef1_return;



typedef struct ExprCppTreeParser_funcdef2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_funcdef2_return;



typedef struct ExprCppTreeParser_funcdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_funcdef_return;



typedef struct ExprCppTreeParser_parse_dummy_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_parse_dummy_return;



typedef struct ExprCppTreeParser_parse_dummy2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_parse_dummy2_return;



typedef struct ExprCppTreeParser_mr_funcdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_mr_funcdef_return;



typedef struct ExprCppTreeParser_func_handle_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_func_handle_return;



typedef struct ExprCppTreeParser_ident_or_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ident_or_number_return;



typedef struct ExprCppTreeParser_ident_group_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ident_group_return;



typedef struct ExprCppTreeParser_ident_group2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ident_group2_return;



typedef struct ExprCppTreeParser_ident_group3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ident_group3_return;



typedef struct ExprCppTreeParser_alt_fcall_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_alt_fcall_return;



typedef struct ExprCppTreeParser_alt_fcall2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_alt_fcall2_return;



typedef struct ExprCppTreeParser_clear_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_clear_return;



typedef struct ExprCppTreeParser_clearvars_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_clearvars_return;



typedef struct ExprCppTreeParser_mult_assign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_mult_assign_return;



typedef struct ExprCppTreeParser_flexible_index_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_flexible_index_return;



typedef struct ExprCppTreeParser_ident_or_keyword_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ident_or_keyword_return;



typedef struct ExprCppTreeParser_expr_or_colon_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_expr_or_colon_return;



typedef struct ExprCppTreeParser_params_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_params_return;



typedef struct ExprCppTreeParser_cell_params_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_cell_params_return;



typedef struct ExprCppTreeParser_id_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_id_list_return;



typedef struct ExprCppTreeParser_base_class_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_base_class_list_return;



typedef struct ExprCppTreeParser_special_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_special_id_return;



typedef struct ExprCppTreeParser_id_list2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_id_list2_return;



typedef struct ExprCppTreeParser_ident_default_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_ident_default_return;



typedef struct ExprCppTreeParser_id_list3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_id_list3_return;



typedef struct ExprCppTreeParser_caseblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_caseblock_return;



typedef struct ExprCppTreeParser_otherwiseblock_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_otherwiseblock_return;



typedef struct ExprCppTreeParser_switchcase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_switchcase_return;



typedef struct ExprCppTreeParser_else_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_else_clause_return;



typedef struct ExprCppTreeParser_else_clause1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_else_clause1_return;



typedef struct ExprCppTreeParser_else_clause2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_else_clause2_return;



typedef struct ExprCppTreeParser_elseif_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_elseif_clause_return;



typedef struct ExprCppTreeParser_elseif_clause1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_elseif_clause1_return;



typedef struct ExprCppTreeParser_elseif_clause2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_elseif_clause2_return;



typedef struct ExprCppTreeParser_if_clause_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_if_clause_return;



typedef struct ExprCppTreeParser_if_clause1_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_if_clause1_return;



typedef struct ExprCppTreeParser_if_clause2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_if_clause2_return;



typedef struct ExprCppTreeParser_conditional_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_conditional_return;



typedef struct ExprCppTreeParser_conditional2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_conditional2_return;



typedef struct ExprCppTreeParser_whileloop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_whileloop_return;



typedef struct ExprCppTreeParser_whileloop2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_whileloop2_return;



typedef struct ExprCppTreeParser_forloop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_forloop_return;



typedef struct ExprCppTreeParser_forloop2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_forloop2_return;



typedef struct ExprCppTreeParser_forloop3_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_forloop3_return;



typedef struct ExprCppTreeParser_parforloop_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_parforloop_return;



typedef struct ExprCppTreeParser_assign_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_assign_return;



typedef struct ExprCppTreeParser_global_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_global_return;



typedef struct ExprCppTreeParser_global2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_global2_return;



typedef struct ExprCppTreeParser_persistent_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_persistent_return;



typedef struct ExprCppTreeParser_comment_or_newline_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_comment_or_newline_return;



typedef struct ExprCppTreeParser_comment_or_newline2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_comment_or_newline2_return;



typedef struct ExprCppTreeParser_comment_or_newline_strict_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_comment_or_newline_strict_return;



typedef struct ExprCppTreeParser_trycatch_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_trycatch_return;



typedef struct ExprCppTreeParser_substmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_substmt_return;



typedef struct ExprCppTreeParser_stmt2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_stmt2_return;



typedef struct ExprCppTreeParser_stmt_group_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_stmt_group_return;



typedef struct ExprCppTreeParser_properties_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_properties_return;



typedef struct ExprCppTreeParser_func_or_mrfunc_def_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_func_or_mrfunc_def_return;



typedef struct ExprCppTreeParser_methods_begin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_methods_begin_return;



typedef struct ExprCppTreeParser_methods_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_methods_return;



typedef struct ExprCppTreeParser_class_begin_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_class_begin_return;



typedef struct ExprCppTreeParser_classdef_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_classdef_return;



typedef struct ExprCppTreeParser_nl_or_eof_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_nl_or_eof_return;



typedef struct ExprCppTreeParser_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_stmt_return;



typedef struct ExprCppTreeParser_alt_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_alt_stmt_return;



typedef struct ExprCppTreeParser_base_stmt_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_base_stmt_return;



typedef struct ExprCppTreeParser_prog_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_prog_return;



typedef struct ExprCppTreeParser_statement_list_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_statement_list_return;



typedef struct ExprCppTreeParser_statement_list2_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;
    pANTLR3_BASE_TREE	tree;

}
    ExprCppTreeParser_statement_list2_return;




/** Context tracking structure for 
ExprCppTreeParser

 */
struct ExprCppTreeParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

     ExprCppTreeParser_nl_or_sc_return
     (*nl_or_sc)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_nl_or_sc_or_comment_return
     (*nl_or_sc_or_comment)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_matrix_return
     (*matrix)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_cell_return
     (*cell)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_comma_or_sc_return
     (*comma_or_sc)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_exprlist_return
     (*exprlist)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_expr_return
     (*expr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_expr2_return
     (*expr2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ineqExpr_return
     (*ineqExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_colonExpr_return
     (*colonExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_addExpr_or_end_return
     (*addExpr_or_end)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_addExpr_return
     (*addExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_multExpr_return
     (*multExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_unaryExpr_return
     (*unaryExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_powExpr_return
     (*powExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_postExpr2_return
     (*postExpr2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_indexExpr_return
     (*indexExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_postExpr_return
     (*postExpr)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ugly1_return
     (*ugly1)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ugly2_return
     (*ugly2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ugly3_return
     (*ugly3)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ugly4_return
     (*ugly4)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ugly_return
     (*ugly)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_equotes_return
     (*equotes)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_string_return
     (*string)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_chars_or_quote_return
     (*chars_or_quote)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_comment_return
     (*comment)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_keywords_return
     (*keywords)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_keywords2_return
     (*keywords2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_operators_return
     (*operators)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_specials_return
     (*specials)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_chars_return
     (*chars)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_path_chars_return
     (*path_chars)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_path_return
     (*path)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_wildcard_return
     (*wildcard)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_option_return
     (*option)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ident_or_global_return
     (*ident_or_global)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_atom_return
     (*atom)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_end_or_eof_return
     (*end_or_eof)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_func_begin_return
     (*func_begin)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_mrfunc_begin_return
     (*mrfunc_begin)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_funcdef1_return
     (*funcdef1)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_funcdef2_return
     (*funcdef2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_funcdef_return
     (*funcdef)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_parse_dummy_return
     (*parse_dummy)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_parse_dummy2_return
     (*parse_dummy2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_mr_funcdef_return
     (*mr_funcdef)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_func_handle_return
     (*func_handle)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ident_or_number_return
     (*ident_or_number)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ident_group_return
     (*ident_group)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ident_group2_return
     (*ident_group2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ident_group3_return
     (*ident_group3)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_alt_fcall_return
     (*alt_fcall)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_alt_fcall2_return
     (*alt_fcall2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_clear_return
     (*clear)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_clearvars_return
     (*clearvars)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_mult_assign_return
     (*mult_assign)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_flexible_index_return
     (*flexible_index)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ident_or_keyword_return
     (*ident_or_keyword)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_expr_or_colon_return
     (*expr_or_colon)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_params_return
     (*params)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_cell_params_return
     (*cell_params)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_id_list_return
     (*id_list)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_base_class_list_return
     (*base_class_list)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_special_id_return
     (*special_id)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_id_list2_return
     (*id_list2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_ident_default_return
     (*ident_default)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_id_list3_return
     (*id_list3)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_caseblock_return
     (*caseblock)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_otherwiseblock_return
     (*otherwiseblock)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_switchcase_return
     (*switchcase)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_else_clause_return
     (*else_clause)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_else_clause1_return
     (*else_clause1)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_else_clause2_return
     (*else_clause2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_elseif_clause_return
     (*elseif_clause)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_elseif_clause1_return
     (*elseif_clause1)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_elseif_clause2_return
     (*elseif_clause2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_if_clause_return
     (*if_clause)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_if_clause1_return
     (*if_clause1)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_if_clause2_return
     (*if_clause2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_conditional_return
     (*conditional)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_conditional2_return
     (*conditional2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_whileloop_return
     (*whileloop)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_whileloop2_return
     (*whileloop2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_forloop_return
     (*forloop)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_forloop2_return
     (*forloop2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_forloop3_return
     (*forloop3)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_parforloop_return
     (*parforloop)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_assign_return
     (*assign)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_global_return
     (*global)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_global2_return
     (*global2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_persistent_return
     (*persistent)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_comment_or_newline_return
     (*comment_or_newline)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_comment_or_newline2_return
     (*comment_or_newline2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_comment_or_newline_strict_return
     (*comment_or_newline_strict)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_trycatch_return
     (*trycatch)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_substmt_return
     (*substmt)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_stmt2_return
     (*stmt2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_stmt_group_return
     (*stmt_group)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_properties_return
     (*properties)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_func_or_mrfunc_def_return
     (*func_or_mrfunc_def)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_methods_begin_return
     (*methods_begin)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_methods_return
     (*methods)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_class_begin_return
     (*class_begin)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_classdef_return
     (*classdef)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_nl_or_eof_return
     (*nl_or_eof)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_stmt_return
     (*stmt)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_alt_stmt_return
     (*alt_stmt)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_base_stmt_return
     (*base_stmt)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_prog_return
     (*prog)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_statement_list_return
     (*statement_list)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ExprCppTreeParser_statement_list2_return
     (*statement_list2)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred2_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred20_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred22_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred24_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred30_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred31_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred34_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred40_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred47_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred49_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred50_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred51_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred52_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred53_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred54_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred55_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred56_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred57_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred58_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred59_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred60_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred64_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred67_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred145_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred147_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred156_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred157_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred158_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred160_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred161_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred162_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred163_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred164_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred165_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred175_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred189_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred190_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred196_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred221_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred223_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred224_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred226_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred229_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred230_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred233_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred244_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred252_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred257_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred265_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred266_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred271_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred273_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred276_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred278_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred279_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred280_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred281_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred291_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred292_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred298_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred299_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred301_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred308_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred309_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred311_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred324_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred325_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred326_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred329_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred330_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred331_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred337_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred342_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred350_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred352_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred354_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred358_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred360_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred361_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred362_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred364_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred365_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred367_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred368_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred369_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred370_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred375_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);

     ANTLR3_BOOLEAN
     (*synpred376_ExprCppTree)	(struct ExprCppTreeParser_Ctx_struct * ctx);
    // Delegated rules

    const char * (*getGrammarFileName)();
    void            (*reset)  (struct ExprCppTreeParser_Ctx_struct * ctx);
    void	    (*free)   (struct ExprCppTreeParser_Ctx_struct * ctx);
/* @headerFile.members() */
pANTLR3_BASE_TREE_ADAPTOR	adaptor;
pANTLR3_VECTOR_FACTORY		vectors;
/* End @headerFile.members() */
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pExprCppTreeParser ExprCppTreeParserNew         (
pANTLR3_COMMON_TOKEN_STREAM
 instream);
ANTLR3_API pExprCppTreeParser ExprCppTreeParserNewSSD      (
pANTLR3_COMMON_TOKEN_STREAM
 instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the 
parser
 will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif
#define EOF      -1
#define T__112      112
#define T__113      113
#define T__114      114
#define T__115      115
#define T__116      116
#define T__117      117
#define T__118      118
#define T__119      119
#define AMP      4
#define AND      5
#define ASSIGN      6
#define CASE      7
#define CELL_ARRAY      8
#define CELL_PARAM_LIST      9
#define CELL_VAL      10
#define CLASSDEF      11
#define CLEAR      12
#define CLEARVARS      13
#define COLON      14
#define COMMA      15
#define CONDITIONAL      16
#define CONT      17
#define CTRANSP      18
#define DIGIT      19
#define DIV      20
#define DOT      21
#define DOTDOT      22
#define DOTPOW      23
#define DUMMY      24
#define DYN_FIELD      25
#define EDIV      26
#define ELDIV      27
#define ELSE      28
#define ELSEIF      29
#define END      30
#define EQUAL      31
#define EQUOTE      32
#define ETIMES      33
#define FIELD      34
#define FOR      35
#define FUNC      36
#define FUNCTION      37
#define FUNC_DEF      38
#define FUNC_HANDLE      39
#define FUNC_LIST      40
#define GEQ      41
#define GLOBAL      42
#define GTHAN      43
#define HACK      44
#define HACKB      45
#define HEXHACK      46
#define HEXVAL      47
#define HML_STRING      48
#define IDENT      49
#define IDENT2      50
#define IDENT2HACK      51
#define ID_LIST      52
#define IF      53
#define INLINE_INDEX      54
#define INLINE_INDEX_CELL      55
#define INPLACE      56
#define LAND      57
#define LBRACKET      58
#define LCURLY      59
#define LDIV      60
#define LEQ      61
#define LETTER      62
#define LOR      63
#define LPAREN      64
#define LTHAN      65
#define MATRIX      66
#define METHODS      67
#define MINUS      68
#define MR_FUNC      69
#define NEGATE      70
#define NEQUAL      71
#define NEWLINE      72
#define NUMBER      73
#define NUMBERHACK      74
#define OR      75
#define OTHER      76
#define OTHERWISE      77
#define PARAM_LIST      78
#define PARFOR      79
#define PARSE_DUMMY      80
#define PCTLCURLY      81
#define PERCENT      82
#define PERSISTENT      83
#define PLUS      84
#define POW      85
#define PROPERTIES      86
#define QUOTE      87
#define QUOTE2      88
#define RBRACKET      89
#define RCURLY      90
#define RCURLYPCT      91
#define RETURN      92
#define RPAREN      93
#define SEMIC      94
#define STATEMENT_LIST      95
#define STMT      96
#define STRUCT      97
#define SWITCH      98
#define TIMES      99
#define TRANSP      100
#define TRY      101
#define UGLY1      102
#define UGLY2      103
#define UGLY3      104
#define UGLY4      105
#define UMINUS      106
#define UNICHAR      107
#define UNICHAR_IDENT      108
#define VECTOR      109
#define WHILE      110
#define WS      111
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for ExprCppTreeParser
 * =============================================================================
 */
/** } */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
