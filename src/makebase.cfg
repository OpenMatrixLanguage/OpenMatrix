# ------------------------------------------------------------------------------
# Copyright (C) 2022 Altair Engineering, Inc.  
# This file is part of the OpenMatrix Language ('OpenMatrix') software.
# Open Source License Information:
# OpenMatrix is free software. You can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
# OpenMatrix is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# Commercial License Information: 
# For a copy of the commercial license terms and conditions, contact the Altair Legal Department at Legal@altair.com and in the subject line, use the following wording: Request for Commercial License Terms for OpenMatrix.
# Altair's dual-license business model allows companies, individuals, and organizations to create proprietary derivative works of OpenMatrix and distribute them - whether embedded or bundled with other software - under a commercial license agreement.
# Use of Altair's trademarks and logos is subject to Altair's trademark licensing policies.  To request a copy, email Legal@altair.com and in the subject line, enter: Request copy of trademark and logo usage policy.
# ------------------------------------------------------------------------------

# ====================================================================
# makebase.cfg - defines makefile variable definition per platform.
# ====================================================================

# platform identification
UNAME := $(shell uname)
ifneq (,$(findstring NT,$(UNAME)))
   PLATFORM := win64
   ifeq (${OML_DEBUG},1)
      PLATFORM := win64d
      ANTLR_PLATFORM := debug
      ANTLR_LIBFILE := antlr3cd.lib
      SO_FLAGS := -DEBUG
   else
      PLATFORM := win64
      ANTLR_PLATFORM := release
      ANTLR_LIBFILE := antlr3c.lib
   endif
endif
ifneq (,$(findstring Linux,$(UNAME)))
   PLATFORM := linux64
endif

LIBDIR = $(OML_ROOT)/src/lib/$(PLATFORM)
BINDIR = $(OML_ROOT)/src/bin/$(PLATFORM)

# ====================================================================
# Dependent library locations
#  Boost, ANTRL
# ====================================================================
#ANTLR_DIR := $(OML_THIRDPARTY)/ANTLR/ANTLR_3.4.1
ANTLR_DIR := $(OML_THIRDPARTY)/ANTLR/libantlr3c-3.4
ANTLR_SRC := $(OML_ROOT)/src/oml/ANTLR/.ANTLR
BOOST_DIR := $(OML_THIRDPARTY)/boost/boost_1_70_0
MATH_DIR := $(OML_ROOT)/src/math
MATIO_INCLUDE := $(OML_THIRDPARTY)/matio/matio-1.5.19/$(PLATFORM)/include/
FFTW_INCLUDE := $(OML_THIRDPARTY)/fftw/fftw-3.2.2/api
QHULL_INC := $(OML_THIRDPARTY)/qhull/qhull-2015.2/src
SUNDIALS_INCLUDE := $(OML_THIRDPARTY)/sundials/sundials-6.2.0/$(PLATFORM)/include
CXX_INCLUDES = -I$(OML_ROOT)/src

HWMATHKERNEL_INC = -I$(OML_ROOT)/src/math/kernel

ifneq (,$(findstring win,$(PLATFORM)))
    ANTLR_LIBS = -LIBPATH:$(ANTLR_DIR)/x64/$(ANTLR_PLATFORM) $(ANTLR_LIBFILE)
	
	MKL_INCLUDE := $(OML_THIRDPARTY)/intel/compilers_and_libraries_2019.5.281/windows/mkl/include
	MKL_LIBS = -LIBPATH:$(OML_THIRDPARTY)/intel/compilers_and_libraries_2019.5.281/windows/mkl/lib/intel64_win mkl_intel_lp64_dll.lib mkl_intel_thread_dll.lib mkl_core_dll.lib
	MKL_LIBS += -LIBPATH:$(OML_THIRDPARTY)/intel/compilers_and_libraries_2019.5.281/windows/compiler/lib/intel64_win libiomp5md.lib 

    MATHKERNEL_LIBS +=  $(OML_ROOT)/src/lib/$(PLATFORM)/mathcore.lib
    OML_LIBS +=  $(OML_ROOT)/src/lib/$(PLATFORM)/oml.lib ws2_32.lib
    FFTW_LIB =  -LIBPATH:$(OML_THIRDPARTY)/fftw/fftw-3.2.2/fftw-3.2.2-libs/x64/Release libfftw-3.2.2-x64.lib
    MATIO_LIB = -LIBPATH:$(OML_THIRDPARTY)/matio/matio-1.5.19/$(PLATFORM)/lib libmatio.lib
    SUNDIALS_LIB = -LIBPATH:$(OML_THIRDPARTY)/sundials/sundials-6.2.0/$(PLATFORM)/lib sundials_arkode.lib sundials_cvode.lib sundials_ida.lib
    QHULL_LIBS = -LIBPATH:$(OML_THIRDPARTY)/qhull/qhull-2015.2/lib qhull_r.lib
else
    ANTLR_LIBS = -L$(ANTLR_DIR)/.libs/ -lantlr3c
	
	MKL_INCLUDE := $(OML_THIRDPARTY)/intel/compilers_and_libraries_2019.5.281/linux/mkl/include
	MKL_LIBS = -L$(OML_THIRDPARTY)/intel/compilers_and_libraries_2019.5.281/linux/mkl/lib/intel64_lin -lmkl_intel_lp64 -lmkl_intel_thread -lmkl_core 
	MKL_LIBS += -L$(OML_THIRDPARTY)/intel/compilers_and_libraries_2019.5.281/linux/compiler/lib/intel64_lin -liomp5

    MATHKERNEL_LIBS = -L$(OML_ROOT)/src/bin/$(PLATFORM) -lmathcore
    OML_LIBS +=  -L$(OML_ROOT)/src/bin/$(PLATFORM) -loml
    FFTW_LIB =  -L$(OML_THIRDPARTY)/fftw/fftw-3.2.2/.libs -lfftw3
    FFTW_LIB +=  -L$(OML_THIRDPARTY)/fftw/fftw-3.2.2/threads/.libs -lfftw3_threads
    MATIO_LIB = -L$(OML_THIRDPARTY)/matio/matio-1.5.19/$(PLATFORM)/lib64 -lmatio
    HDF5_LIBS =  $(OML_THIRDPARTY)/hdf/hdf5-1.12.0/$(PLATFORM)/lib/libhdf5.so.200 
    HDF5_LIBS += $(OML_THIRDPARTY)/hdf/hdf5-1.12.0/$(PLATFORM)/lib/libhdf5_hl.so.200 
    HDF5_LIBS += $(OML_THIRDPARTY)/hdf/hdf5-1.12.0/$(PLATFORM)/lib/libhdf5_cpp.so.200 
    HDF5_LIBS += $(OML_THIRDPARTY)/hdf/hdf5-1.12.0/$(PLATFORM)/lib/libszip.so.2 
    SUNDIALS_LIB = -L$(OML_THIRDPARTY)/sundials/sundials-6.2.0/$(PLATFORM)/lib -lsundials_arkode -lsundials_cvode -lsundials_ida
    QHULL_LIBS = -L$(OML_THIRDPARTY)/qhull/qhull-2015.2/lib -lqhull_r
endif

ifneq (,$(findstring NT,$(UNAME)))
   # windows
   CXX := cl -nologo
   SO := link -nologo -manifest:no
   ifeq ($(OML_DEBUG),1)
      CXX_OPTIMIZE += -MDd -Od -Zi
      CXX_FLAGS += -Fd"$(BINDIR)/$(PROJ).pdb"
   else
      CXX_OPTIMIZE += -MD -O2
   endif
   CC_FLAGS += $(CXX_OPTIMIZE) -FC
   CXX_FLAGS += $(CXX_OPTIMIZE) -W3 -wd4996 -wd4251 -GR -EHsc -FC
   CXX_DEFINES += -DWIN32 -DOS_WIN -D_WIN64

   IMPORT_LIB = $(LIBDIR)/$(PROJ).lib
#   TARGET = $(BINDIR)/$(PROJ).dll
#   TARGET = $(BINDIR)/$(PROJ).exe

    define compile-c
        $(CXX) -c -Fo$@ $(CC_FLAGS) $(CXX_DEFINES) $(CXX_INCLUDES) $<
    endef
    define compile-cxx
        $(CXX) -c -Fo$@ $(CXX_FLAGS) $(CXX_DEFINES) $(CXX_INCLUDES) $<
    endef
    define build-shared-lib
            $(SO) -out:$@ -implib:$(IMPORT_LIB) -dll $(SO_FLAGS) $(OBJECTS) -LIBPATH:$(LIBDIR) $(LIBS) ;
    endef
    define build-exec
            $(SO) -out:$@ $(SO_FLAGS) $(OBJECTS) -LIBPATH:$(LIBDIR) $(LIBS) ;
    endef

    RM       := rm
    MKDIR    := mkdir -p
endif

ifneq (,$(findstring Linux,$(UNAME)))
   # linux
   # Updates required for Travis to use g++ 4.9
   # Travis will export CXX="g++-4.9"
   ifneq (,$(CXX))
     CXX  := $(CXX)
     SO := $(CXX)
   else
     CXX  := g++
     SO := g++
   endif
   ifeq ($(OML_DEBUG),1)
      CXX_OPTIMIZE := -g
      CXX_FLAGS += -D_DEBUG
   else
      CXX_OPTIMIZE  := -O2
   endif
   CXX_DEFINES += -DLINUX -DOS_UNIX
   CXX_FLAGS += $(CXX_OPTIMIZE) -fPIC -std=c++14
   SO_FLAGS += -shared -Wl,-Bsymbolic -fPIC

   #TARGET = $(BINDIR)/lib$(PROJ).so

   define compile-c
      $(CXX) -c -o $@ $(CXX_FLAGS) $(CXX_DEFINES) $(CXX_INCLUDES) $<
   endef
   define compile-cxx
      $(CXX) -c -o $@ $(CXX_FLAGS) $(CXX_DEFINES) $(CXX_INCLUDES) $<
   endef
   define build-shared-lib
      $(SO) -o $@ $(SO_FLAGS) $(OBJECTS) -L$(LIBDIR) $(LIBS);
   endef
   define build-exec
      $(SO) -o $@ $(SO_FLAGS) $(OBJECTS) -L$(LIBDIR) $(LIBS);
   endef

   RM       := rm
   MKDIR    := mkdir -p
endif

objdir = $(PLATFORM)/dummy

.PHONY : bindir 
all: bindir $(TARGET)


bindir:
	@if [ ! -d $(BINDIR) ]; then \
	    $(MKDIR) $(BINDIR); \
	fi
	@if [ ! -d $(LIBDIR) ]; then \
	    $(MKDIR) $(LIBDIR); \
	fi

$(objdir):
	@if [ ! -d $(PLATFORM) ]; then \
	    $(MKDIR) $(PLATFORM); \
	fi
	@if [ ! -f $@ ]; then \
	    touch $@; \
	fi


