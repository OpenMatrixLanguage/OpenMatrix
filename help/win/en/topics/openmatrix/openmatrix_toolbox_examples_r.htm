
<!DOCTYPE html
  PUBLIC "" "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us">
<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />        
      <meta name="copyright" content="(C) Copyright 2023" /><meta name="DC.rights.owner" content="(C) Copyright 2023" /><meta name="DC.Type" content="reference" /><meta name="DC.Title" content="OML Toolbox Method Examples" /><meta name="abstract" content="Toolbox methods include cell array, matrix, and struct." /><meta name="description" content="Toolbox methods include cell array, matrix, and struct." /><meta name="DC.Relation" scheme="URI" content="../../topics/openmatrix/creating_toolboxes_openmatrix_r.htm" /><meta name="DC.Format" content="XHTML" /><meta name="DC.Identifier" content="oml_toolboxes_r" /><link rel="stylesheet" type="text/css" href="../../oxygen-webhelp/resources/css/commonltr.css?buildId=2018042310"><!----></link><title>OML Toolbox Method Examples</title><!--  Generated with Oxygen version 20.0-SNAPSHOT, build number 2018042310.  --><link rel="stylesheet" type="text/css" href="../../oxygen-webhelp/resources/css/webhelp_topic.css?buildId=2018042310"><!----></link><link rel="stylesheet" type="text/css" href="../../open_matrix_custom.css" /><script type="text/javascript"><!--
          
          var prefix = "../../index.htm";
          
          --></script><script type="text/javascript" src="../../oxygen-webhelp/resources/js/jquery-3.1.1.min.js"><!----></script><script type="text/javascript" src="../../oxygen-webhelp/resources/js/jquery.cookie.js"><!----></script><script type="text/javascript" src="../../oxygen-webhelp/resources/js/jquery.highlight-3.js"><!----></script><script type="text/javascript" charset="utf-8" src="../../oxygen-webhelp/resources/js/log.js?buildId=2018042310"><!----></script><script type="text/javascript" charset="utf-8" src="../../oxygen-webhelp/resources/js/webhelp_topic.js?buildId=2018042310"><!----></script></head>
<body onload="highlightSearchTerm()" class="frmBody" id="oml_toolboxes_r">
<header role="banner"><table class="nav"><tbody><tr><td colspan="2"><div id="printlink"><a href="javascript:window.print();" title="Print this page"></a></div><div id="permalink"><a href="#" title="Link to this page"></a></div></td></tr><tr><td style="width:75%;"><span class="topic_breadcrumb_links"><span class="topic_breadcrumb_link"><a class="navheader_parent_path" href="../../topics/openmatrix/../../topics/openmatrix/openmatrix_users_guide_c.htm" title="User Guide">User Guide</a></span><span class="topic_breadcrumb_link"><a class="navheader_parent_path" href="../../topics/openmatrix/creating_toolboxes_openmatrix_r.htm" title="Additional toolboxes can be written in the C/C++ language and interfaced with OML.">Creating Toolboxes for OpenMatrix</a></span></span></td><td><span id="topic_navigation_links" class="navheader">
<span class="navparent"><a class="link" href="../../topics/openmatrix/creating_toolboxes_openmatrix_r.htm" title="Additional toolboxes can be written in the C/C++ language and interfaced with OML."><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">Creating Toolboxes for OpenMatrix</span></a></span>  </span></td></tr></tbody></table></header><main role="main"><article role="article" aria-labelledby="ariaid-title1">
  <h1 class="title topictitle1" id="ariaid-title1"><span class="keyword">OML</span> Toolbox Method Examples</h1>

  
  <div class="body refbody"><p class="shortdesc">Toolbox methods include cell array, matrix, and struct.</p>

    <section class="section" id="oml_toolboxes_r__section_dnn_24r_mbb"><h2 class="title sectiontitle">Cell Array Example</h2>
      
      <div class="p">The following function creates a cell array of the specified size and fills it sequentially
        starting with
        0.<pre class="pre codeblock"><code>bool myfunc(OMLInterface* eval, const OMLCurrencyList* inputs, OMLCurrencyList* outputs)
{
OMLCurrency* size_cur = inputs-&gt;Get(0);
double       size     = size_cur-&gt;GetScalar();

OMLCellArray* out_cells = outputs-&gt;CreateCellArray(size, 1);

for (int j=0; j&lt;size; j++)
{
    OMLCurrency* temp = outputs-&gt;CreateCurrencyFromDouble(j);
    out_cells-&gt;SetValue(j, temp);
}

outputs-&gt;AddCellArray(out_cells);

return true;
}</code></pre></div>

    </section>

    <section class="section" id="oml_toolboxes_r__section_pdw_j4r_mbb"><h2 class="title sectiontitle"><strong class="ph b">Matrix Example</strong></h2>
      
      <pre class="pre codeblock"><code>bool myfunc(OMLInterface* eval, const OMLCurrencyList* inputs, OMLCurrencyList* outputs)
{
// make sure we have the proper number of inputs
if (inputs-&gt;Size() == 2)
{
OMLCurrency* input1 = inputs-&gt;Get(0);
OMLCurrency* input2 = inputs-&gt;Get(1);

// make sure both inputs are matrices
if (input1-&gt;IsMatrix() &amp;&amp; input2-&gt;IsMatrix())
{
OMLMatrix* matrix1 = input1-&gt;GetMatrix();
OMLMatrix* matrix2 = input2-&gt;GetMatrix();

// make sure both matrices are the same size
if ((matrix1-&gt;GetRows() == matrix2-&gt;GetRows()) &amp;&amp; (matrix1-&gt;GetCols() == matrix2-&gt;GetCols()))
{
int     size        = matrix1-&gt;GetRows()*matrix1-&gt;GetCols();

// make sure both matrices are real
if (matrix1-&gt;IsReal() &amp;&amp; matrix2-&gt;IsReal())
{
double* mat1_data   = matrix1-&gt;GetRealData();
double* mat2_data   = matrix2-&gt;GetRealData();
// allocate space for the result data
double* result_data = new double [size];

for (int j=0; j&lt;size; j++)
result_data[j] = mat1_data[j] + mat2_data[j];

// OML will manage the result_data memory from here on

OMLMatrix* result = outputs-&gt;CreateMatrix(matrix1-&gt;GetRows(), matrix1-&gt;GetCols(), result_data);

outputs-&gt;AddMatrix(result);
}
}
}
}
return true;
}</code></pre>
    </section>

    <section class="section" id="oml_toolboxes_r__section_nhd_l4r_mbb"><h2 class="title sectiontitle"><strong class="ph b">Struct Example</strong></h2>
      
      <pre class="pre codeblock"><code>bool myfunc(OMLInterface* eval, const OMLCurrencyList* inputs, OMLCurrencyList* outputs)
{
// create a struct that holds all the US states and their capitals
// abbreviated to a list of two states for this example
// create an empty struct of the proper size

OMLStruct* struct = outputs-&gt;CreateStruct(2,1);

// set the field values for each struct

struct-&gt;SetValue(0, “state”, outputs-&gt;GetCurrencyFromString(“Michigan”));
struct-&gt;SetValue(0, “capital”, outputs-&gt;GetCurrencyFromString(“Lansing”));
struct-&gt;SetValue(1, “state”, outputs-&gt;GetCurrencyFromString(“Ohio”));
struct-&gt;SetValue(1, “capital”, outputs-&gt;GetCurrencyFromString(“Columbus”));

outputs-&gt;AddStruct(struct);
return true;

}</code></pre>
    </section>

  </div>

<nav role="navigation" class="related-links"></nav></article></main><footer role="contentinfo"><div class="navfooter"><!---->
<span class="navparent"><a class="link" href="../../topics/openmatrix/creating_toolboxes_openmatrix_r.htm" title="Additional toolboxes can be written in the C/C++ language and interfaced with OML."><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">Creating Toolboxes for OpenMatrix</span></a></span>  </div><div class="footer" id="webhelp_copyright_information">
        
        <div>
            <p>(c) Altair Engineering, Inc. and Contributors. (2007-2022)</p>
               
        </div>
    </div></footer></body>
</html>