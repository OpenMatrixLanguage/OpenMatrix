
<!DOCTYPE html
  PUBLIC "" "about:legacy-compat">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-us" lang="en-us">
<head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />        
      <meta name="copyright" content="(C) Copyright 2021" /><meta name="DC.rights.owner" content="(C) Copyright 2021" /><meta name="DC.Type" content="reference" /><meta name="DC.Title" content="Objects in OpenMatrix Language" /><meta name="abstract" content="Objects in OML are defined using the classdef keyword. This creates a blueprint for an object but does not actually create (instantiate) anything." /><meta name="description" content="Objects in OML are defined using the classdef keyword. This creates a blueprint for an object but does not actually create (instantiate) anything." /><meta name="indexterms" content="objects in OpenMatrix Language" /><meta name="DC.subject" content="objects in OpenMatrix Language" /><meta name="keywords" content="objects in OpenMatrix Language" /><meta name="DC.Relation" scheme="URI" content="../../topics/language_guides/language_guide_intro_header_c.htm" /><meta name="prodname" content="OpenMatrix" /><meta name="DC.Format" content="XHTML" /><meta name="DC.Identifier" content="reference_xjy_jcp_j3b" /><link rel="stylesheet" type="text/css" href="../../oxygen-webhelp/resources/css/commonltr.css?buildId=2018042310"><!----></link><title>Objects in OpenMatrix Language</title><!--  Generated with Oxygen version 20.0-SNAPSHOT, build number 2018042310.  --><link rel="stylesheet" type="text/css" href="../../oxygen-webhelp/resources/css/webhelp_topic.css?buildId=2018042310"><!----></link><link rel="stylesheet" type="text/css" href="../../oxygen-webhelp/resources/skins/skin.css?buildId=2018042310" /><link rel="stylesheet" type="text/css" href="../../open_matrix_custom.css" /><script type="text/javascript"><!--
          
          var prefix = "../../index.htm";
          
          --></script><script type="text/javascript" src="../../oxygen-webhelp/resources/js/jquery-3.1.1.min.js"><!----></script><script type="text/javascript" src="../../oxygen-webhelp/resources/js/jquery.cookie.js"><!----></script><script type="text/javascript" src="../../oxygen-webhelp/resources/js/jquery.highlight-3.js"><!----></script><script type="text/javascript" charset="utf-8" src="../../oxygen-webhelp/resources/js/log.js?buildId=2018042310"><!----></script><script type="text/javascript" charset="utf-8" src="../../oxygen-webhelp/resources/js/webhelp_topic.js?buildId=2018042310"><!----></script></head>
<body onload="highlightSearchTerm()" class="frmBody" id="reference_xjy_jcp_j3b">
<header role="banner"><table class="nav"><tbody><tr><td colspan="2"><div id="printlink"><a href="javascript:window.print();" title="Print this page"></a></div><div id="permalink"><a href="#" title="Link to this page"></a></div></td></tr><tr><td style="width:75%;"><span class="topic_breadcrumb_links"><span class="topic_breadcrumb_link"><a class="navheader_parent_path" href="../../topics/language_guides/../../topics/reference/oml_language/oml_ref_guide.htm" title="Reference guides are available for functions and commands supported by OML.">Reference Guides</a></span><span class="topic_breadcrumb_link"><a class="navheader_parent_path" href="../../topics/language_guides/language_guide_intro_header_c.htm" title="OpenMatrix is a mathematical scripting language.">Scripting Guide for the OpenMatrix Language</a></span></span></td><td><span id="topic_navigation_links" class="navheader">
<span class="navparent"><a class="link" href="../../topics/language_guides/language_guide_intro_header_c.htm" title="OpenMatrix is a mathematical scripting language."><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">Scripting Guide for the OpenMatrix Language</span></a></span>  </span></td></tr></tbody></table></header><main role="main"><article role="article" aria-labelledby="ariaid-title1">
    <h1 class="title topictitle1" id="ariaid-title1">Objects in <span class="keyword">OpenMatrix</span> Language</h1>

    
    
    <div class="body refbody"><p class="shortdesc">Objects in <span class="keyword">OML</span> are defined using the <var class="keyword varname">classdef</var>
        keyword. This creates a blueprint for an object but does not actually create (instantiate)
        anything.</p>

        <section class="section" id="reference_xjy_jcp_j3b__section_pzc_4cp_j3b">
            
            <div class="p">There are three parts to defining an object:<ul class="ul" id="reference_xjy_jcp_j3b__ul_x3r_qcp_j3b">
                    <li class="li">The declaration including the name and parent class.</li>

                    <li class="li">The properties section.</li>

                    <li class="li">The methods section.</li>

                </ul>
</div>

            <div class="p">A class defined by the <var class="keyword varname">classdef</var> keyword has a name, which must be
                a valid <span class="keyword">OML</span> function
                name.<pre class="pre codeblock"><code>classdef MyClass
end</code></pre></div>

            <div class="p">Properties of an object act in a similar manner to
                structs.<pre class="pre codeblock"><code>classdef MyClass
    properties
        name
        value
    end
end</code></pre></div>

            <div class="p">By default, properties are public and can be accessed by using the dot (.)
                operator.<pre class="pre codeblock"><code>m = MyClass;
m.name = ‘fun’;
m.value = 0;</code></pre></div>

            <div class="p">Default values of properties can be assigned when they are
                declared.<pre class="pre codeblock"><code>classdef MyClass
    properties
        name = ‘fun’;
        value = 0;
    end
end
m = MyClass;</code></pre></div>

            <div class="p">Methods of an object are regular <span class="keyword">OML</span> functions that can operate
                on the object’s data. The first parameter to each method is the object
                itself.<pre class="pre codeblock"><code>classdef MyClass
    properties
        name
        value
    end
 
    methods
        function obj = AddOne(self)
            obj.value = self.value+1;
            obj.name = self.name;
        end
    end
end

m = MyClass;
m.name = ‘fun’;
m.value = 0;
m = m.AddOne();</code></pre></div>

            <div class="p">The constructor is a special method. It must have the same name as the class itself.
                The first parameter to the constructor is an exception to the rule above in that it
                is not the object itself. The constructor is expected to return a newly-created
                object.<pre class="pre codeblock"><code>classdef MyClass
    properties
        name
        value
    end
 
    methods
        function obj = MyClass(in_name, in_value)
             obj.name = in_name;
             obj.value = in_value;
        end
    end
end

m = MyClass(‘fun’, 3);</code></pre></div>

            <div class="p">A class can inherit properties and methods from other classes using the &lt;
                operator.<pre class="pre codeblock"><code>classdef Employee
    properties
        name;
        ID;
    end
    methods
        function obj = Employee (in_name, in_ID)
            obj.name = in_name;
            obj.ID = in_ID;
        end   
    end
end

classdef Supervisor &lt; Employee
    properties
        group
    end
    methods
        function obj = Supervisor(in_name, in_ID)
            obj.name = in_name;
            obj.id = in_ID;
            obj.group = {};
        end   
    end
end
super = Supervisor(‘Chris’, 4)</code></pre></div>

            <div class="p">In the previous example, instead of duplicating the Employee constructor code in the
                Supervisor constructor, it is possible to call a method from the base class using
                the following
                syntax:<pre class="pre codeblock"><code>function obj = Supervisor(in_name, in_ID)
            obj = obj@Employee(in_name, in_ID);
            obj.group = {};
        end</code></pre></div>

            <div class="p">A special base class is the handle class. Inheriting from this predefined class
                allows objects to be treated as references instead of values when passed to
                functions. In this previous example, it was necessary to return a modified object
                from the AddOne method and then overwrite the unmodified object with the
                newly-returned
                object.<pre class="pre codeblock"><code>classdef MyClass
    properties
        name
        value
    end
 
    methods
        function obj = AddOne(self)
            obj.value = self.value+1;
            obj.name = self.name;
        end
    end
end

m = MyClass;
m.name = ‘fun’;
m.value = 0;
m = m.AddOne()</code></pre></div>

            <div class="p">Instead, if MyClass inherits from the handle base class, the following code gives the
                same
                result:<pre class="pre codeblock"><code>classdef MyClass &lt; handle
    properties
        name
        value
    end
 
    methods
        function AddOne(self)
            self.value = self.value+1;
        end
    end
end

m = MyClass;
m.name = 'fun';
m.value = 0;
m.AddOne();
m</code></pre></div>

            <div class="p">Standard <span class="keyword">OML</span> functions can be overloaded in a class’s methods
                block.<pre class="pre codeblock"><code>classdef ratnum
    properties
	    n
                  d
	end

	methods
	    function r = ratnum(numerator, denomenator)
		    r.n = numerator;
			r.d = denomenator;
		end

		function r = sqrt(r)
		    r = sqrt(r.n/r.d);
		end
	end
end

a = ratnum(2,3);
sqrt(a)</code></pre></div>

            <p class="p">In this case, when <span class="keyword cmdname">sqrt</span> is called, the class’s method is used
                instead of the standard built-in function (which is unaware of user-defined
                classes).</p>

            <div class="p">Overloading the <span class="keyword cmdname">disp</span> function has an additional effect. Whenever
                an object is to be displayed (implicitly or not), the <span class="keyword cmdname">disp</span> method
                for that object will be called instead of using the standard struct-like
                display.<pre class="pre codeblock"><code>classdef ratnum
    properties	    
                  n
                  d
	end

	methods
	    function r = ratnum(numerator, denomenator)
		    r.n = numerator;
		    r.d = denomenator;
                  end

	    function disp(r)
         	        if (r.d ~= 1)
                          fprintf('%d/%d\n', r.n, r.d);
                      else
		 fprintf('%d\n', r.n);
	        end
                  end	
            end
end

a = ratnum(2,3)</code></pre></div>

            <div class="p">Standard <span class="keyword">OML</span> operators can be overloaded using special method
                names. For example, if a class contains a method named ‘plus’, this will be called
                instead of the standard <span class="keyword cmdname">plus</span> function when the operator + is
                used.<pre class="pre codeblock"><code>classdef ratnum
    properties	    
                  n
                  d
	end

	methods
	    function r = ratnum(numerator, denomenator)
		    r.n = numerator;
		    r.d = denomenator;
                  end

	    function disp(r)
         	        if (r.d ~= 1)
                          fprintf('%d/%d\n', r.n, r.d);
                      else
		 fprintf('%d\n', r.n);
	        end
                  end	

	    function plus(r1, r2)
	        if (class(r2) == 'ratnum')
	            r = ratnum(r1.n*r2.d + r2.n*r1.d, r1.d * r2.d);
                      elseif (isscalar(r2))
	            r = ratnum(r1.d*r2 + r1.n, r1.d);
	        else
	            r = 0;
	        end                
                end	
            end
end

ratnum(1,3)+ratnum(1,2)</code></pre></div>

            <div class="p">
                <div class="note note"><span class="notetitle">Note:</span> The <span class="keyword cmdname">plus</span> function is called even though it is the +
                    operator that is used.</div>

            </div>

            <p class="p">The first parameter to any overloaded method or operator is guaranteed to be of the
                specified type, but any additional arguments need to be checked and handled by the
                class developer. In the previous example, r1 is always a ratnum, but r2 can be a
                ratnum, a scalar, or anything else (for example, a cell array). </p>

            <div class="p">Below is a list of all overloadable operators along with their corresponding method
                    names:<dl class="dl table">
                    
                        <dt class="dt dlterm">+</dt>

                        <dd class="dd">plus</dd>

                    
                    
                        <dt class="dt dlterm">-</dt>

                        <dd class="dd">minus</dd>

                    
                    
                        <dt class="dt dlterm">*</dt>

                        <dd class="dd">mtimes</dd>

                    
                    
                        <dt class="dt dlterm">.*</dt>

                        <dd class="dd">times</dd>

                    
                    
                        <dt class="dt dlterm">/</dt>

                        <dd class="dd">mrdivide</dd>

                    
                    
                        <dt class="dt dlterm">./</dt>

                        <dd class="dd">rdivide</dd>

                    
                    
                        <dt class="dt dlterm">\</dt>

                        <dd class="dd">mldivide</dd>

                    
                    
                        <dt class="dt dlterm">.\</dt>

                        <dd class="dd">ldivide</dd>

                    
                    
                        <dt class="dt dlterm">==</dt>

                        <dd class="dd">eq</dd>

                    
                    
                        <dt class="dt dlterm">~=</dt>

                        <dd class="dd">ne</dd>

                    
                    
                        <dt class="dt dlterm">^</dt>

                        <dd class="dd">mpower</dd>

                    
                    
                        <dt class="dt dlterm">.^</dt>

                        <dd class="dd">power</dd>

                    
                    
                        <dt class="dt dlterm">uminus</dt>

                        <dd class="dd">unary minus negates a single object instead of subtracting two
                            objects</dd>

                    
                </dl>
</div>

            <div class="p">Properties can be protected from direct access using an access specifier. This
                prevents code outside of the class from accessing or modifying these values. Only
                class methods will be able to do
                so.<pre class="pre codeblock"><code>classdef MyClass
    properties (Access = private)
        name
        value
    end
 
    methods
        function obj = MyClass(in_name, in_value)
             obj.name = in_name;
             obj.value = in_value;
        end
    end
end
m = MyClass(‘Ted’, 4)
m.name = ‘Bob’ % this triggers a run-time error</code></pre></div>

        </section>

    </div>

<nav role="navigation" class="related-links"></nav></article></main><footer role="contentinfo"><div class="navfooter"><!---->
<span class="navparent"><a class="link" href="../../topics/language_guides/language_guide_intro_header_c.htm" title="OpenMatrix is a mathematical scripting language."><span class="navheader_label">Parent topic</span><span class="navheader_separator">: </span><span class="navheader_linktext">Scripting Guide for the OpenMatrix Language</span></a></span>  </div><div class="footer" id="webhelp_copyright_information">
        
        <div>
            <p>(c) Altair Engineering, Inc. and Contributors. (2007-2021)</p>
               
        </div>
    </div></footer></body>
</html>