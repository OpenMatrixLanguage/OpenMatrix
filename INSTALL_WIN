Prerequisites (Tested versions, and newer versions might also work):
	1.	Git (tested with git version 2.38.1.windows.1)
	2.	Git "LFS" (git-lfs/3.2.0)
	3.	Visual Studio 2019
	4.	GNU Make 4.1 (from Cygwin)
	
Steps to Build OpenMatrix from GitHub:
	1.	md ombuild
			create build directory
	2.	cd \ombuild
			C:\ombuild>
	3.	git clone https://github.com/OpenMatrixLanguage/OpenMatrix
	
	4.	git clone https://github.com/OpenMatrixLanguage/Continuous_Integration_Windows
	
	5.	Download cmake-3.26.0-rc1-windows-x86_64.msi from https://cmake.org/files/v3.26/ and install it by double clicking on the .msi file.
	
	6.	Download winlibs-x86_64-posix-seh-gcc-12.2.0-mingw-w64ucrt-10.0.0-r4.zip from https://winlibs.com/. When you open the page, select from UCRT runtime. After you extract it,
	
	7.	copy the mingw64 folder to C:\Program Files\mingw64
	
	8.	(for OM 1.0.2 and earlier)
		
		Add following environment varibales to "path" under "system variables" in the same order
		C:\ombuild\Continuous_Integration_Windows\third_party\lapack\lapack-3.7.1-build;c:\Program Files\CMake\bin;C:\Program Files\mingw64\bin;C:\cygwin64\bin;
	
		Note: C:\Program Files\CMake\bin and C:\cygwin64\bin may have to be present.
	
	9.	Click on "x64 Native Tools Command Prompt for VS 2019" shortcut under Start/VS Studio 2019

	10.	cd OpenMatrix
		C:\ombuild\OpenMatrix
	
	11.	edit setpathr.bat to specify third_party full path.
		Update OML_THIRDPARTY to directory on your system.  For this build example:
		set OML_THIRDPARTY=C:\ombuild\Continuous_Integration_Windows\third_party
	
	Note: if you want to build debug version then edit following variables: win64 to win64d and 0 to          1 in setpathr.bat
			set path=%OML_ROOT%\src\bin\win64d;%path%
			set OML_DEBUG=1

	12.	 Run setpathr.bat
	
	13.	cd src
		enter source directory - 	C:\ombuild\OpenMatrix\src> 
	
	14.	make -f makefile.open 2>&1 | tee build.log
		Run the make process.  The redirection displays and logs the build output to the named logfile.
